{"ast":null,"code":"import { useReducer } from 'react';\nimport { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from \"./actions\";\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      let newQuantity = state.cart.map(product => {\n        if (product._id === action._id) {\n          product.purchaseQuantity = action.purchaseQuantity;\n        }\n\n        return product;\n      });\n      return { ...state,\n        cartOpen: true,\n        cart: newQuantity\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n    // if it's none of these actions, do not update state at all and keep things the same!\n\n    default:\n      return state;\n  }\n};\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}","map":{"version":3,"sources":["/Users/theresarutledge/Desktop/Bootcamp/projects/shop-shop/client/src/utils/reducers.js"],"names":["useReducer","UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","newQuantity","map","purchaseQuantity","useProductReducer","initialState"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,OAAzB;AAEA,SACIC,eADJ,EAEIC,iBAFJ,EAGIC,uBAHJ,EAIIC,WAJJ,EAKIC,oBALJ,EAMIC,gBANJ,EAOIC,oBAPJ,EAQIC,UARJ,EASIC,WATJ,QAUS,WAVT;AAYE,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKZ,eAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELG,QAAAA,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACE,QAAX;AAFL,OAAP;;AAIA,SAAKZ,iBAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHI,QAAAA,UAAU,EAAC,CAAC,GAAGH,MAAM,CAACG,UAAX;AAFR,OAAP;;AAIR,SAAKZ,uBAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHK,QAAAA,eAAe,EAACJ,MAAM,CAACI;AAFpB,OAAP;;AAKA,SAAKZ,WAAL;AACI,aAAM,EACF,GAAGO,KADD;AAEFM,QAAAA,QAAQ,EAAC,IAFP;AAGFC,QAAAA,IAAI,EAAC,CAAC,GAAGP,KAAK,CAACO,IAAV,EAAeN,MAAM,CAACO,OAAtB;AAHH,OAAN;;AAKJ,SAAMd,oBAAN;AACI,aAAM,EACF,GAAGM,KADD;AAEFO,QAAAA,IAAI,EAAC,CAAC,GAAGP,KAAK,CAACO,IAAV,EAAgB,GAAGN,MAAM,CAACE,QAA1B;AAFH,OAAN;;AAIJ,SAAMR,gBAAN;AACI,UAAIc,QAAQ,GAAGT,KAAK,CAACO,IAAN,CAAWG,MAAX,CAAkBF,OAAO,IAAI;AACxC,eAAOA,OAAO,CAACG,GAAR,KAAgBV,MAAM,CAACU,GAA9B;AACH,OAFc,CAAf;AAGA,aAAM,EACF,GAAGX,KADD;AAEFM,QAAAA,QAAQ,EAACG,QAAQ,CAACG,MAAT,GAAgB,CAFvB;AAGFL,QAAAA,IAAI,EAACE;AAHH,OAAN;;AAKJ,SAAKb,oBAAL;AACI,UAAIiB,WAAW,GAAGb,KAAK,CAACO,IAAN,CAAWO,GAAX,CAAeN,OAAO,IAAI;AACxC,YAAGA,OAAO,CAACG,GAAR,KAAgBV,MAAM,CAACU,GAA1B,EAA8B;AAC1BH,UAAAA,OAAO,CAACO,gBAAR,GAA2Bd,MAAM,CAACc,gBAAlC;AACH;;AACD,eAAOP,OAAP;AACH,OALiB,CAAlB;AAMA,aAAM,EACF,GAAGR,KADD;AAEFM,QAAAA,QAAQ,EAAC,IAFP;AAGFC,QAAAA,IAAI,EAACM;AAHH,OAAN;;AAKJ,SAAKhB,UAAL;AACI,aAAM,EACF,GAAGG,KADD;AAEFM,QAAAA,QAAQ,EAAC,KAFP;AAGFC,QAAAA,IAAI,EAAC;AAHH,OAAN;;AAKJ,SAAMT,WAAN;AACI,aAAM,EACF,GAAGE,KADD;AAEFM,QAAAA,QAAQ,EAAC,CAACN,KAAK,CAACM;AAFd,OAAN;AAIN;;AACA;AACE,aAAON,KAAP;AA/DJ;AAiED,CAlEM;AAoEP,OAAO,SAASgB,iBAAT,CAA2BC,YAA3B,EAAwC;AAC3C,SAAO5B,UAAU,CAACU,OAAD,EAAUkB,YAAV,CAAjB;AACH","sourcesContent":["import {useReducer} from 'react';\n\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY, \n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n  } from \"./actions\";\n  \n  export const reducer = (state, action) => {\n    switch (action.type) {\n      // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n      case UPDATE_PRODUCTS:\n        return {\n          ...state,\n          products: [...action.products],\n        };\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories:[...action.categories]\n            };\n    case UPDATE_CURRENT_CATEGORY:\n        return {\n            ...state,\n            currentCategory:action.currentCategory\n        };\n\n        case ADD_TO_CART:\n            return{\n                ...state,\n                cartOpen:true,\n                cart:[...state.cart,action.product]\n            };\n        case  ADD_MULTIPLE_TO_CART:\n            return{\n                ...state,\n                cart:[...state.cart, ...action.products]\n            };\n        case  REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n                return product._id !== action._id\n            });\n            return{\n                ...state,\n                cartOpen:newState.length>0,\n                cart:newState\n            };\n        case UPDATE_CART_QUANTITY:\n            let newQuantity = state.cart.map(product => {\n                if(product._id === action._id){\n                    product.purchaseQuantity = action.purchaseQuantity;\n                }\n                return product;\n            })\n            return{\n                ...state,\n                cartOpen:true,\n                cart:newQuantity\n            };\n        case CLEAR_CART:\n            return{\n                ...state,\n                cartOpen:false,\n                cart:[]\n            };\n        case  TOGGLE_CART:\n            return{\n                ...state,\n                cartOpen:!state.cartOpen\n            };\n      // if it's none of these actions, do not update state at all and keep things the same!\n      default:\n        return state;\n    }\n  };\n\n  export function useProductReducer(initialState){\n      return useReducer(reducer, initialState);\n  }\n"]},"metadata":{},"sourceType":"module"}