{"ast":null,"code":"var _jsxFileName = \"/Users/theresarutledge/Desktop/Bootcamp/projects/shop-shop/client/src/components/CategoryMenu/index.js\";\nimport React, { useEffect } from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n  const {\n    categories\n  } = state;\n  const {\n    loading,\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Choose a Category:\"), categories.map(item => /*#__PURE__*/React.createElement(\"button\", {\n    key: item._id,\n    onClick: () => {\n      handleClick(item._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, item.name)));\n}\n\nexport default CategoryMenu;","map":{"version":3,"sources":["/Users/theresarutledge/Desktop/Bootcamp/projects/shop-shop/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","useStoreContext","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","useQuery","QUERY_CATEGORIES","idbPromise","CategoryMenu","state","dispatch","categories","loading","data","categoryData","type","forEach","category","then","handleClick","id","currentCategory","map","item","_id","name"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAAOC,iBAAP,EAA0BC,uBAA1B,QAAwD,qBAAxD;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAGA,SAASC,YAAT,GAAwB;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,eAAe,EAAzC;AACA,QAAM;AAACS,IAAAA;AAAD,MAAeF,KAArB;AACA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAAkCT,QAAQ,CAACC,gBAAD,CAAhD;AAEAL,EAAAA,SAAS,CAAE,MAAM;AACf,QAAGa,YAAH,EAAgB;AACdJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAACZ,iBADE;AAEPQ,QAAAA,UAAU,EAACG,YAAY,CAACH;AAFjB,OAAD,CAAR;AAIAG,MAAAA,YAAY,CAACH,UAAb,CAAwBK,OAAxB,CAAgCC,QAAQ,IAAI;AAC1CV,QAAAA,UAAU,CAAC,YAAD,EAAc,KAAd,EAAoBU,QAApB,CAAV;AACD,OAFD;AAGD,KARD,MAQO,IAAI,CAACL,OAAL,EAAa;AAClBL,MAAAA,UAAU,CAAC,YAAD,EAAc,KAAd,CAAV,CAA+BW,IAA/B,CAAoCP,UAAU,IAAI;AAChDD,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAACZ,iBADE;AAEPQ,UAAAA,UAAU,EAACA;AAFJ,SAAD,CAAR;AAID,OALD;AAMD;AAEF,GAlBQ,EAkBN,CAACG,YAAD,EAAcF,OAAd,EAAsBF,QAAtB,CAlBM,CAAT;;AAoBA,QAAMS,WAAW,GAAGC,EAAE,IAAI;AACxBV,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAACX,uBADE;AAEPiB,MAAAA,eAAe,EAACD;AAFT,KAAD,CAAR;AAID,GALD;;AAQA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGT,UAAU,CAACW,GAAX,CAAeC,IAAI,iBAClB;AACE,IAAA,GAAG,EAAEA,IAAI,CAACC,GADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACbL,MAAAA,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGD,IAAI,CAACE,IANR,CADD,CAFH,CADF;AAeD;;AAED,eAAejB,YAAf","sourcesContent":["import React, {useEffect} from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport{UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY} from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { idbPromise } from '../../utils/helpers';\n\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n  const {categories} = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect( () => {\n    if(categoryData){\n      dispatch({\n        type:UPDATE_CATEGORIES,\n        categories:categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories','put',category);\n      });\n    } else if (!loading){\n      idbPromise('categories','get').then(categories => {\n        dispatch({\n          type:UPDATE_CATEGORIES,\n          categories:categories\n        })\n      })\n    }\n\n  }, [categoryData,loading,dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type:UPDATE_CURRENT_CATEGORY,\n      currentCategory:id\n    });\n  };\n\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}